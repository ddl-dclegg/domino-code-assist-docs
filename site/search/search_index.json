{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Low Code Assistant\u2122 (LCA) \ud83e\udd5c In a nutshell Low Code Assistant\u2122 (LCA) provides point-and-click shortcuts for common data science boilerplate. LCA is available in private preview on any Domino 4.x-5.x platform - ask your Domino account manger for access. \ud83d\udea6 Switch on Low Code Assistant\u2122 (LCA) To enable LCA, simply add this line to the Docker file of your default Domino compute environment. RUN pip install [ secret . whl link ] Here, [secret .whl link] is provided by your Domino account manager. ( Domino staff, please find this installation link on GitHub or Google Drive . ) After this line is added. LCA appears automagically in your Jupyter toolbar. \u2728 \ud83d\udcc8 Accelerate new Python/R analysts Low Code Assistant\u2122 (LCA) accelerates universal data analysis tasks by autogenerating Python or R code with point & click GUIs: \u2744\ufe0f Import data from a business store like Snowflake, Redshift, or S3 \ud83e\udd20 Munge or \"wrangle\" data into a desired format \ud83d\udcca Craete and share data visualizations \ud83c\udf9a\ufe0f Create and share data apps In tests with analysts new to Python (new graduates), Low Code Assistant (LCA) enhanced productivity by 20x: Task Python Novice - Productivity Gain Python Expert - Productivity Gain Make a statistical data visualization 5x faster with LCA 1x faster with LCA Connect to Snowflake and import data as a dataframe 5x faster with LCA 2x faster with LCA Make a Dash/Shiny app where users can upload their own data 10x faster with LCA 2x faster with LCA Publish & share an interactive dashboard 20x faster with LCA 3x faster with LCA Low Code Assistant\u2122 - Extended Screencast var video = document.querySelector('video'); video.currentTime = 0.5; Get started Installation","title":"Low Code Assistant\u2122 (LCA)"},{"location":"#low-code-assistanttm-lca","text":"","title":"Low Code Assistant\u2122 (LCA)"},{"location":"#in-a-nutshell","text":"Low Code Assistant\u2122 (LCA) provides point-and-click shortcuts for common data science boilerplate. LCA is available in private preview on any Domino 4.x-5.x platform - ask your Domino account manger for access.","title":"\ud83e\udd5c In a nutshell"},{"location":"#switch-on-low-code-assistanttm-lca","text":"To enable LCA, simply add this line to the Docker file of your default Domino compute environment. RUN pip install [ secret . whl link ] Here, [secret .whl link] is provided by your Domino account manager. ( Domino staff, please find this installation link on GitHub or Google Drive . ) After this line is added. LCA appears automagically in your Jupyter toolbar. \u2728","title":"\ud83d\udea6 Switch on Low Code Assistant\u2122 (LCA)"},{"location":"#accelerate-new-pythonr-analysts","text":"Low Code Assistant\u2122 (LCA) accelerates universal data analysis tasks by autogenerating Python or R code with point & click GUIs: \u2744\ufe0f Import data from a business store like Snowflake, Redshift, or S3 \ud83e\udd20 Munge or \"wrangle\" data into a desired format \ud83d\udcca Craete and share data visualizations \ud83c\udf9a\ufe0f Create and share data apps In tests with analysts new to Python (new graduates), Low Code Assistant (LCA) enhanced productivity by 20x: Task Python Novice - Productivity Gain Python Expert - Productivity Gain Make a statistical data visualization 5x faster with LCA 1x faster with LCA Connect to Snowflake and import data as a dataframe 5x faster with LCA 2x faster with LCA Make a Dash/Shiny app where users can upload their own data 10x faster with LCA 2x faster with LCA Publish & share an interactive dashboard 20x faster with LCA 3x faster with LCA","title":"\ud83d\udcc8 Accelerate new Python/R analysts"},{"location":"#low-code-assistanttm-extended-screencast","text":"var video = document.querySelector('video'); video.currentTime = 0.5; Get started Installation","title":"Low Code Assistant\u2122 - Extended Screencast"},{"location":"install/","text":"Installation Get the latest LCA release from the LCA CHANGELOG on GitHub or Google Drive Go to the customer\u2019s Domino Standard Environment (under Environments in the side navigation bar) Add this line to the end of the env\u2019s Dockerfile setup (but before the last USER ubuntu command): RUN pip install [secret .whl link from CHANGELOG ] (The secret .whl link will look something like: RUN pip install https://xxxxxxxxx.s3.us-west-2.amazonaws.com/x/dominocode-0.0.21-py2.py3-none-any.whl ) Save the default environment Dockerfile. That\u2019s it! You\u2019re done! The LCA toolbar button will now show up in the Jupyter toolbar for your customer. Be sure to add LCA to any other env\u2019s that are frequently used by your customer.","title":"Installation"},{"location":"install/#installation","text":"Get the latest LCA release from the LCA CHANGELOG on GitHub or Google Drive Go to the customer\u2019s Domino Standard Environment (under Environments in the side navigation bar) Add this line to the end of the env\u2019s Dockerfile setup (but before the last USER ubuntu command): RUN pip install [secret .whl link from CHANGELOG ] (The secret .whl link will look something like: RUN pip install https://xxxxxxxxx.s3.us-west-2.amazonaws.com/x/dominocode-0.0.21-py2.py3-none-any.whl ) Save the default environment Dockerfile. That\u2019s it! You\u2019re done! The LCA toolbar button will now show up in the Jupyter toolbar for your customer. Be sure to add LCA to any other env\u2019s that are frequently used by your customer.","title":"Installation"},{"location":"getting-started/","text":"Overview The Domino Low Code Assistant\u2122 (LCA) can help generate code for various tasks. Loading data Loading a CSV file into a Pandas dataframe Loading Snowflake data into a Pandas dataframe Loading Redshift data into a Pandas dataframe Loading data using SQL into a Pandas dataframe Transforming data Filtering nan values Visualisation Creating a scatter plot Apps Creating an App Deploying an App Upload data to an App Code snippets Code snippets","title":"Overview"},{"location":"getting-started/#overview","text":"The Domino Low Code Assistant\u2122 (LCA) can help generate code for various tasks.","title":"Overview"},{"location":"getting-started/#loading-data","text":"Loading a CSV file into a Pandas dataframe Loading Snowflake data into a Pandas dataframe Loading Redshift data into a Pandas dataframe Loading data using SQL into a Pandas dataframe","title":"Loading data"},{"location":"getting-started/#transforming-data","text":"Filtering nan values","title":"Transforming data"},{"location":"getting-started/#visualisation","text":"Creating a scatter plot","title":"Visualisation"},{"location":"getting-started/#apps","text":"Creating an App Deploying an App Upload data to an App","title":"Apps"},{"location":"getting-started/#code-snippets","text":"Code snippets","title":"Code snippets"},{"location":"getting-started/code-snippets/","text":"Code Snippets Using snippets Choose \"Insert snippets\" from the Low Code Assistant\u2122 menu to insert code snippets into your notebook. Browse the available snippets and select the one you want to insert. Adding snippets A snippet library can be added by adding a git repository with snippets to your Domino project. An example snippet library can be found here: https://github.com/dominodatalab/low-code-assistant-snippets If credentials are required to access the repository, they can be setup in your account: Select \"Account Settings\" Select \"Git Credentials\" Snippet format LCA looks for snippets in a \"snippet\" folder in the root of the repository. Any python files in this folder will be loaded as snippets. The sub folder structure will be maintained in the LCA menu. Example: MySnippets \u251c\u2500\u2500 .git \u251c\u2500\u2500 snippets \u251c\u2500\u2500 my_snippet.py \u251c\u2500\u2500 subfolder \u251c\u2500\u2500 my_other_snippet.py Editing snippets Snippets can be edited: In the git repository with your regular git workflow for this repo. In the notebook using LCA. With VSCode by opening a workspace with VSCode for this project in Domino. Editing with LCA Enable snippet edit mode by clicking the pen icon in the context menu: Enter the snippet code and click on \"SAVE AS SNIPPET\" Enter the name of the snippet and select the repository to store the snippet After this you can keep editing the snippet if needed and save by clicking \"SAVE\" After the enabling the snippet edit mode, controls for editing snippets are also displayed in the snippets panel. To sync the snippet back to git, open \"File Changes\" in the left-hand sidebar and click \"Select and sync\" on the \"Imported Repositories\" section Editing with a VSCode workspace Click on \"Open Folder\" in VSCode Imported git repo's are available at \"/repo\" Create a new snippet Sync changes in the \"Imported Repositories\" section: Updating snippets in Notebook workspace When snippets are updated in the git repository, the change is only visible in the notebook workspace after pulling the changes and reloading the snippets. Click on \"pull\" in the \"Imported Repositories\" section Reload snippets","title":"Code snippets"},{"location":"getting-started/code-snippets/#code-snippets","text":"","title":"Code Snippets"},{"location":"getting-started/code-snippets/#using-snippets","text":"Choose \"Insert snippets\" from the Low Code Assistant\u2122 menu to insert code snippets into your notebook. Browse the available snippets and select the one you want to insert.","title":"Using snippets"},{"location":"getting-started/code-snippets/#adding-snippets","text":"A snippet library can be added by adding a git repository with snippets to your Domino project. An example snippet library can be found here: https://github.com/dominodatalab/low-code-assistant-snippets If credentials are required to access the repository, they can be setup in your account: Select \"Account Settings\" Select \"Git Credentials\"","title":"Adding snippets"},{"location":"getting-started/code-snippets/#snippet-format","text":"LCA looks for snippets in a \"snippet\" folder in the root of the repository. Any python files in this folder will be loaded as snippets. The sub folder structure will be maintained in the LCA menu. Example: MySnippets \u251c\u2500\u2500 .git \u251c\u2500\u2500 snippets \u251c\u2500\u2500 my_snippet.py \u251c\u2500\u2500 subfolder \u251c\u2500\u2500 my_other_snippet.py","title":"Snippet format"},{"location":"getting-started/code-snippets/#editing-snippets","text":"Snippets can be edited: In the git repository with your regular git workflow for this repo. In the notebook using LCA. With VSCode by opening a workspace with VSCode for this project in Domino.","title":"Editing snippets"},{"location":"getting-started/code-snippets/#editing-with-lca","text":"Enable snippet edit mode by clicking the pen icon in the context menu: Enter the snippet code and click on \"SAVE AS SNIPPET\" Enter the name of the snippet and select the repository to store the snippet After this you can keep editing the snippet if needed and save by clicking \"SAVE\" After the enabling the snippet edit mode, controls for editing snippets are also displayed in the snippets panel. To sync the snippet back to git, open \"File Changes\" in the left-hand sidebar and click \"Select and sync\" on the \"Imported Repositories\" section","title":"Editing with LCA"},{"location":"getting-started/code-snippets/#editing-with-a-vscode-workspace","text":"Click on \"Open Folder\" in VSCode Imported git repo's are available at \"/repo\" Create a new snippet Sync changes in the \"Imported Repositories\" section:","title":"Editing with a VSCode workspace"},{"location":"getting-started/code-snippets/#updating-snippets-in-notebook-workspace","text":"When snippets are updated in the git repository, the change is only visible in the notebook workspace after pulling the changes and reloading the snippets. Click on \"pull\" in the \"Imported Repositories\" section Reload snippets","title":"Updating snippets in Notebook workspace"},{"location":"getting-started/transform/","text":"Transforming data The following video includes all the steps explained below Initialize the Low Code Assistant\u2122 We start similarly as in Loading data by initializing the Low Code Assistant\u2122. Loading data In this case, instead of using the Low Code Assistant\u2122, we load the data ourselves: Open dialog Hover above the icon and click the menu item, which will open the Transformations dialog. Choose dataframe When the Tranformations dialog opens, we have to choose a dataframe. Click the select box to get an overview of all dataframe variables and click on the one you want to apply transformations on. After which the data is shown in a table. Apply quick transformation We could manually add a transformation by clicking on the , but in this example we will add a tranformation by a quick action throught the table. Hover above a cell value containing nan , and you can then hover above the triple dots icon, to get the menu Click the menu item to open the dialog: And click the button to filter the dataframe. Now we can see that we only have values with nan for the cabin column. Show code Toggle the switch to show the code Insert code And click the button to insert the code into the notebook.","title":"Filter NaN values"},{"location":"getting-started/transform/#transforming-data","text":"The following video includes all the steps explained below","title":"Transforming data"},{"location":"getting-started/transform/#initialize-the-low-code-assistanttm","text":"We start similarly as in Loading data by initializing the Low Code Assistant\u2122.","title":"Initialize the Low Code Assistant\u2122"},{"location":"getting-started/transform/#loading-data","text":"In this case, instead of using the Low Code Assistant\u2122, we load the data ourselves:","title":"Loading data"},{"location":"getting-started/transform/#open-dialog","text":"Hover above the icon and click the menu item, which will open the Transformations dialog.","title":"Open dialog"},{"location":"getting-started/transform/#choose-dataframe","text":"When the Tranformations dialog opens, we have to choose a dataframe. Click the select box to get an overview of all dataframe variables and click on the one you want to apply transformations on. After which the data is shown in a table.","title":"Choose dataframe"},{"location":"getting-started/transform/#apply-quick-transformation","text":"We could manually add a transformation by clicking on the , but in this example we will add a tranformation by a quick action throught the table. Hover above a cell value containing nan , and you can then hover above the triple dots icon, to get the menu Click the menu item to open the dialog: And click the button to filter the dataframe. Now we can see that we only have values with nan for the cabin column.","title":"Apply quick transformation"},{"location":"getting-started/transform/#show-code","text":"Toggle the switch to show the code","title":"Show code"},{"location":"getting-started/transform/#insert-code","text":"And click the button to insert the code into the notebook.","title":"Insert code"},{"location":"getting-started/app/create/","text":"Create an App Check installation If you have followed the installation instructions , you should see a blue Low Code Assistant\u2122 button in the toolbar of your Jupyter notebook. Initialize the Low Code Assistant\u2122 The Low Code Assistant\u2122 can be started by clicking the Low Code Assistant\u2122 button in the toolbar. It will insert a code snippet in a new code cell and execute it. After running succesfully, you should see Low Code Assistant\u2122 initialized , as in the following screenshot: Loading CSV data into a Pandas DataFrame Load a dataset using the Low Code Assistant\u2122, as described in Getting started or by adding your own code. In our example we add the following code ourselves: import pandas as pd df = pd . read_csv ( \"../mydata/titanic.csv\" ) df . head ( 2 ) Creating visualizations Adding a histogram Create a histogram using the Low Code Assistant\u2122, as described in Scatter Plot or adding your own code. In our example we add the following code ourselves: import plotly.express as px histogram_survived = px . histogram ( df , x = \"survived\" ) histogram_survived Last expression Note that the last expression ( histogram_survived ) causes the visual to display in the Jupyter notebook. Adding a scatter plot Create a scatter plot using the Low Code Assistant\u2122, as described in Scatter Plot . In our example we add the following code ourselves: import plotly.express as px scatter_age_fare = px . scatter ( df , x = \"age\" , y = \"fare\" , color = \"survived\" ) scatter_age_fare Last expression Note that the last expression ( scatter_age_fare ) causes the visual to display in the Jupyter notebook. Open the App configurator If you now hover above the next code cell, you should see a blue icon to the right: If you hover above the icon, it will show a popup menu: Click on the App button to open the app configurator. Configure the app Toggle the visualization matching the variables found in the notebook to add them to the app. Optionally drag and resize the apps. Insert the code When ready, click 'Insert code'. The configuration is added in code to your notebook. The code can be edited, and a preview can be shown by clicking the button.","title":"App creation"},{"location":"getting-started/app/create/#create-an-app","text":"","title":"Create an App"},{"location":"getting-started/app/create/#check-installation","text":"If you have followed the installation instructions , you should see a blue Low Code Assistant\u2122 button in the toolbar of your Jupyter notebook.","title":"Check installation"},{"location":"getting-started/app/create/#initialize-the-low-code-assistanttm","text":"The Low Code Assistant\u2122 can be started by clicking the Low Code Assistant\u2122 button in the toolbar. It will insert a code snippet in a new code cell and execute it. After running succesfully, you should see Low Code Assistant\u2122 initialized , as in the following screenshot:","title":"Initialize the Low Code Assistant\u2122"},{"location":"getting-started/app/create/#loading-csv-data-into-a-pandas-dataframe","text":"Load a dataset using the Low Code Assistant\u2122, as described in Getting started or by adding your own code. In our example we add the following code ourselves: import pandas as pd df = pd . read_csv ( \"../mydata/titanic.csv\" ) df . head ( 2 )","title":"Loading CSV data into a Pandas DataFrame"},{"location":"getting-started/app/create/#creating-visualizations","text":"","title":"Creating visualizations"},{"location":"getting-started/app/create/#adding-a-histogram","text":"Create a histogram using the Low Code Assistant\u2122, as described in Scatter Plot or adding your own code. In our example we add the following code ourselves: import plotly.express as px histogram_survived = px . histogram ( df , x = \"survived\" ) histogram_survived Last expression Note that the last expression ( histogram_survived ) causes the visual to display in the Jupyter notebook.","title":"Adding a histogram"},{"location":"getting-started/app/create/#adding-a-scatter-plot","text":"Create a scatter plot using the Low Code Assistant\u2122, as described in Scatter Plot . In our example we add the following code ourselves: import plotly.express as px scatter_age_fare = px . scatter ( df , x = \"age\" , y = \"fare\" , color = \"survived\" ) scatter_age_fare Last expression Note that the last expression ( scatter_age_fare ) causes the visual to display in the Jupyter notebook.","title":"Adding a scatter plot"},{"location":"getting-started/app/create/#open-the-app-configurator","text":"If you now hover above the next code cell, you should see a blue icon to the right: If you hover above the icon, it will show a popup menu: Click on the App button to open the app configurator.","title":"Open the App configurator"},{"location":"getting-started/app/create/#configure-the-app","text":"Toggle the visualization matching the variables found in the notebook to add them to the app. Optionally drag and resize the apps.","title":"Configure the app"},{"location":"getting-started/app/create/#insert-the-code","text":"When ready, click 'Insert code'. The configuration is added in code to your notebook. The code can be edited, and a preview can be shown by clicking the button.","title":"Insert the code"},{"location":"getting-started/app/deploy/","text":"Deploy an App","title":"Deploy an App"},{"location":"getting-started/app/deploy/#deploy-an-app","text":"","title":"Deploy an App"},{"location":"getting-started/app/upload/","text":"Upload data to an app Check installation If you have followed the installation instructions , you should see a blue Low Code Assistant\u2122 button in the toolbar of your Jupyter notebook. Initialize the Low Code Assistant\u2122 The Low Code Assistant\u2122 can be started by clicking the Low Code Assistant\u2122 button in the toolbar. It will insert a code snippet in a new code cell and execute it. After running successfully, you should see Low Code Assistant\u2122 initialized , as in the following screenshot: If you now hover above a code cell, you should see a blue icon to the right: If you hover above the icon, it will show a popup menu: Loading CSV data into a Pandas DataFrame Open dialog Hover above the icon and click the menu item, which will open the Load Data dialog. Select Datasets tab To select a file, navigate to the Datasets tab and navigate to the right directory: Open file Select the file you want to open and check the reactive toggle button. This allows the app we will create to replace the dataframe by uploading data. This will give slightly different code than what you are expected to see when you simply load the csv (e.g. as in CSV to Pandas ) Creating visualizations Adding a histogram Create a histogram using the Low Code Assistant\u2122, as described in Scatter Plot or add your own code. In our example we add the following code ourselves: import plotly.express as px histogram_survived = px . histogram ( df , x = \"survived\" ) histogram_survived Open the App configurator Click on the App button to open the app configurator. Configure the app Toggle both df_reactive and histogram_survived and drag and resize the elements to create a good-looking app. Deploy the app Follow the Deploy an App steps to deploy the app. Result Once the app is deployed, you can view the app, and should see a screen like this: Now drag a different CSV file into the file drop zone, and the Low Code Assistant\u2122 app will re-execute the whole notebook, but with the data from the uploaded file: Note that you can do many transformations and visualization. For this example, for simplicity, we only used a single dataframe and a single visualization. Note : it is the user's responsibility at the moment to make sure the column names have the same names as the original file.","title":"Upload data to an App"},{"location":"getting-started/app/upload/#upload-data-to-an-app","text":"","title":"Upload data to an app"},{"location":"getting-started/app/upload/#check-installation","text":"If you have followed the installation instructions , you should see a blue Low Code Assistant\u2122 button in the toolbar of your Jupyter notebook.","title":"Check installation"},{"location":"getting-started/app/upload/#initialize-the-low-code-assistanttm","text":"The Low Code Assistant\u2122 can be started by clicking the Low Code Assistant\u2122 button in the toolbar. It will insert a code snippet in a new code cell and execute it. After running successfully, you should see Low Code Assistant\u2122 initialized , as in the following screenshot: If you now hover above a code cell, you should see a blue icon to the right: If you hover above the icon, it will show a popup menu:","title":"Initialize the Low Code Assistant\u2122"},{"location":"getting-started/app/upload/#loading-csv-data-into-a-pandas-dataframe","text":"","title":"Loading CSV data into a Pandas DataFrame"},{"location":"getting-started/app/upload/#open-dialog","text":"Hover above the icon and click the menu item, which will open the Load Data dialog.","title":"Open dialog"},{"location":"getting-started/app/upload/#select-datasets-tab","text":"To select a file, navigate to the Datasets tab and navigate to the right directory:","title":"Select Datasets tab"},{"location":"getting-started/app/upload/#open-file","text":"Select the file you want to open and check the reactive toggle button. This allows the app we will create to replace the dataframe by uploading data. This will give slightly different code than what you are expected to see when you simply load the csv (e.g. as in CSV to Pandas )","title":"Open file"},{"location":"getting-started/app/upload/#creating-visualizations","text":"","title":"Creating visualizations"},{"location":"getting-started/app/upload/#adding-a-histogram","text":"Create a histogram using the Low Code Assistant\u2122, as described in Scatter Plot or add your own code. In our example we add the following code ourselves: import plotly.express as px histogram_survived = px . histogram ( df , x = \"survived\" ) histogram_survived","title":"Adding a histogram"},{"location":"getting-started/app/upload/#open-the-app-configurator","text":"Click on the App button to open the app configurator.","title":"Open the App configurator"},{"location":"getting-started/app/upload/#configure-the-app","text":"Toggle both df_reactive and histogram_survived and drag and resize the elements to create a good-looking app.","title":"Configure the app"},{"location":"getting-started/app/upload/#deploy-the-app","text":"Follow the Deploy an App steps to deploy the app.","title":"Deploy the app"},{"location":"getting-started/app/upload/#result","text":"Once the app is deployed, you can view the app, and should see a screen like this: Now drag a different CSV file into the file drop zone, and the Low Code Assistant\u2122 app will re-execute the whole notebook, but with the data from the uploaded file: Note that you can do many transformations and visualization. For this example, for simplicity, we only used a single dataframe and a single visualization. Note : it is the user's responsibility at the moment to make sure the column names have the same names as the original file.","title":"Result"},{"location":"getting-started/loading-data/csv/","text":"Loading data The following video includes all the steps explained below Check installation If you have followed the installation instructions , you should see a blue Low Code Assistant\u2122 button in the toolbar of your Jupyter notebook. Initialize the Low Code Assistant\u2122 The Low Code Assistant\u2122 can be started by clicking the Low Code Assistant\u2122 button in the toolbar. It will insert a code snippet in a new code cell and execute it. After running succesfully, you should see Low Code Assistant\u2122 initialized , as in the following screenshot: If you now hover above a code cell, you should see a blue icon to the right: If you hover above the icon, it will show a popup menu: Loading CSV data into a Pandas DataFrame Open dialog Hover above the icon and click the menu item, which will open the Load Data dialog. Select Datasets tab To select a file, navigate to the Datasets tab: Navigate to the right directory Use .. to move a directory up: And click the bold directory name to enter a directory Click to open Click on the titanic.csv file, and it will close the dialog, and insert the Python code to load the .csv file into a Pandas dataframe. The dataframe will be assigned to the df variable. The last expression (the last line) of the code cell will only be the df variable, which will cause the notebook to display its content. You can now do your custom data transformations, by following the Pandas documentatio","title":"CSV to Pandas"},{"location":"getting-started/loading-data/csv/#loading-data","text":"The following video includes all the steps explained below","title":"Loading data"},{"location":"getting-started/loading-data/csv/#check-installation","text":"If you have followed the installation instructions , you should see a blue Low Code Assistant\u2122 button in the toolbar of your Jupyter notebook.","title":"Check installation"},{"location":"getting-started/loading-data/csv/#initialize-the-low-code-assistanttm","text":"The Low Code Assistant\u2122 can be started by clicking the Low Code Assistant\u2122 button in the toolbar. It will insert a code snippet in a new code cell and execute it. After running succesfully, you should see Low Code Assistant\u2122 initialized , as in the following screenshot: If you now hover above a code cell, you should see a blue icon to the right: If you hover above the icon, it will show a popup menu:","title":"Initialize the Low Code Assistant\u2122"},{"location":"getting-started/loading-data/csv/#loading-csv-data-into-a-pandas-dataframe","text":"","title":"Loading CSV data into a Pandas DataFrame"},{"location":"getting-started/loading-data/csv/#open-dialog","text":"Hover above the icon and click the menu item, which will open the Load Data dialog.","title":"Open dialog"},{"location":"getting-started/loading-data/csv/#select-datasets-tab","text":"To select a file, navigate to the Datasets tab:","title":"Select Datasets tab"},{"location":"getting-started/loading-data/csv/#navigate-to-the-right-directory","text":"Use .. to move a directory up: And click the bold directory name to enter a directory","title":"Navigate to the right directory"},{"location":"getting-started/loading-data/csv/#click-to-open","text":"Click on the titanic.csv file, and it will close the dialog, and insert the Python code to load the .csv file into a Pandas dataframe. The dataframe will be assigned to the df variable. The last expression (the last line) of the code cell will only be the df variable, which will cause the notebook to display its content. You can now do your custom data transformations, by following the Pandas documentatio","title":"Click to open"},{"location":"getting-started/loading-data/redshift/","text":"Loading data from Redshift","title":"Redshift to Pandas"},{"location":"getting-started/loading-data/redshift/#loading-data-from-redshift","text":"","title":"Loading data from Redshift"},{"location":"getting-started/loading-data/snowflake/","text":"Loading data from Snowflake","title":"Snowflake to Pandas"},{"location":"getting-started/loading-data/snowflake/#loading-data-from-snowflake","text":"","title":"Loading data from Snowflake"},{"location":"getting-started/loading-data/sql/","text":"Loading data using SQL This example shows how to load data using custom SQL and demonstrates the auto complete feature of the SQL editor. We demonstrate it using a Redshift data source, but this feature also works for Snowflake.","title":"SQL with editor to Pandas"},{"location":"getting-started/loading-data/sql/#loading-data-using-sql","text":"This example shows how to load data using custom SQL and demonstrates the auto complete feature of the SQL editor. We demonstrate it using a Redshift data source, but this feature also works for Snowflake.","title":"Loading data using SQL"},{"location":"getting-started/viz/scatter/","text":"Scatter plot","title":"Scatter plot with Plotly"},{"location":"getting-started/viz/scatter/#scatter-plot","text":"","title":"Scatter plot"}]}